doctype html
html
	head
		if locals.title
			title= title
		else
			title New Sails App

		// Viewport mobile tag for sensible mobile support
		meta(name="viewport",content="width=device-width, initial-scale=1, maximum-scale=1")

		//-
			Stylesheets and Preprocessors
			==============================

			You can always bring in CSS files manually with `<link>` tags, or asynchronously
			using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
			of Sails' conventional asset pipeline (boilerplate Gruntfile).

			By default, stylesheets from your `assets/styles` folder are included
			here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
			are supported. In production, your styles will be minified and concatenated into
			a single file.

			To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Change the order of your CSS files
					+ Import stylesheets from other directories
					+ Use a different or additional preprocessor, like SASS, SCSS or Stylus

		// STYLES
		link(rel="stylesheet", href="/styles/css/bootstrap.min.css")
		link(rel="stylesheet", href="/styles/css/custom.css")
		link(rel="stylesheet", href="/styles/css/font-awesome.min.css")
		link(rel="stylesheet", href="/styles/css/main.css")
		link(rel="stylesheet", href="/styles/css/morris.css")
		link(rel="stylesheet", href="/styles/css/sb-admin-rtl.css")
		link(rel="stylesheet", href="/styles/css/sb-admin.css")
		// STYLES END

		block styles
	body
		nav.navbar.navbar-default(role='navigation')
			.container
				.container-fluid
					// Brand and toggle get grouped for better mobile display
					.navbar-header
						button.navbar-toggle(type='button', data-toggle='collapse', data-target='#bs-example-navbar-collapse-1')
							span.sr-only Toggle navigation
							span.icon-bar
							span.icon-bar
							span.icon-bar
						a.navbar-brand(href="/") Hotdeal.vn
					// Collect the nav links, forms, and other content for toggling
					#bs-example-navbar-collapse-1.collapse.navbar-collapse
						ul.nav.navbar-nav
							li.active
								a(href='#') Link
							li
								a(href='#') Link
							li.dropdown
								a.dropdown-toggle(href='#', data-toggle='dropdown')
									| Link 
									span.caret
								ul.dropdown-menu
									li
										a(href='#') Link
									li
										a(href='#') Link
									li
										a(href='#') Link
									li.divider
									li
										a(href='#') Link
									li.divider
									li
										a(href='#') One more separated link
						form.navbar-form(role='search')
							.form-group
								input.form-control(type='text', placeholder='Search')
							a.btn.btn-default(href="/session/new/" ) Sign in
							a.btn.btn-primary(href="/user/new/") Sign up
		block body
			
		//-
			Client-side Templates
			========================

			HTML templates are important prerequisites of modern, rich client applications.
			To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
			that you load these templates client-side.

			By default, your Gruntfile is configured to automatically load and precompile
			client-side JST templates in your `assets/templates` folder, then
			include them here automatically (between TEMPLATES and TEMPLATES END).

			To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Import templates from other directories
					+ Use a different template engine (handlebars, jade, dust, etc.)
					+ Internationalize your client-side templates using a server-side
						stringfile before they're served.

		// TEMPLATES
		
		// TEMPLATES END

		//-
			Client-side Javascript
			========================

			You can always bring in JS files manually with `script` tags, or asynchronously
			on the client using a solution like AMD (RequireJS).  Or, if you like, you can
			take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

			By default, files in your `assets/js` folder are included here
			automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
			CoffeeScript (.coffee) are supported. In production, your scripts will be minified
			and concatenated into a single file.

			To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Change the order of your scripts
					+ Import scripts from other directories
					+ Use a different preprocessor, like TypeScript

		// SCRIPTS
		script(src="/js/dependencies/sails.io.js")
		script(src="/js/dependencies/aajquery.js")
		script(src="/js/dependencies/bootstrap.min.js")
		script(src="/js/dependencies/morris-data.js")
		script(src="/js/dependencies/morris.js")
		script(src="/js/dependencies/morris.min.js")
		script(src="/js/dependencies/raphael.min.js")
		script(src="/js/dependencies/start.js")
		// SCRIPTS END

